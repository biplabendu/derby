---
title: "HARD Eligibility Tracker (AZRD)"
reference-location: margin
citation-location: margin
editor_options: 
  chunk_output_type: console
comments:
  hypothesis:
    theme: clean
---

```{r params}
dttm <- Sys.time() |> 
  .POSIXct("MST") |> 
  format("%Y-%m-%d %H:%M %Z")

today <- Sys.time() |> .POSIXct("MST") |> lubridate::as_date()

# Set which game
which_game = "AZRD"
```


Last updated on `r today`.

```{r}
library(dplyr)
library(ggplot2)
source(here::here("./functions/utils.R"))

# Load google sheets ----------------------------------------------------------
# links <- c(
#   practice = "https://docs.google.com/spreadsheets/d/1mJuAuvHl95e39-0kdC1c_JkiB7lsaWw0O8UnnQobMN0",
#   volunteer = "https://docs.google.com/spreadsheets/d/149v3bE1N_0GNkyiTo4eFn-DCsJ1xDUolFQ9V3komxRM"
# )

links <- c(
  practice = "https://docs.google.com/spreadsheets/d/e/2PACX-1vThN94KzaEV4gk9lICkn7HnOJTAPtTDQuDypir_pxXMzwi7oGxgBbM21gVx6vjHoz-KZV2Jl0kHIhvm/pub?gid=1819256109&single=true&output=csv",
  volunteer = "https://docs.google.com/spreadsheets/d/e/2PACX-1vRKuh5MOL8VJi3VD_WtbbLVyH8O9rbjhkKYWET8IlUib_NBhSUW_jRVA7bZR18K8cSgmPcADy2ESaAa/pub?gid=845902717&single=true&output=csv",
  eligibility_periods = "https://docs.google.com/spreadsheets/d/e/2PACX-1vThN94KzaEV4gk9lICkn7HnOJTAPtTDQuDypir_pxXMzwi7oGxgBbM21gVx6vjHoz-KZV2Jl0kHIhvm/pub?gid=1566653249&single=true&output=csv"
)

```



```{r}

# Load data

dat <-  purrr::map(
  links,
  # sheets,
  # ~ googlesheets4::read_sheet(
  #   .x,
  #   sheet = .y
  # ) |> 
  ~ read.csv(
    .x
  ) |> 
    janitor::clean_names()
  ) |> 
  setNames(
    names(links)
  )
  
meta <- dat[["eligibility_periods"]] |>
  filter(
    game == which_game
  ) |> 
  mutate(
    across(
      c(start, end),
      ~ lubridate::ymd(.x)
    )
  )
```


```{r}
# Subset

## Practice hours

tdat <- list()

tdat[["practice"]] <- dat[["practice"]] |>
# dat[["practice"]] |> 
  as_tibble() |> 
  select(
    timestamp,
    p_date = practice_date,
    p_type = practice_type,
    off_skates,
    in_attendance,
    duration_pop = how_long_was_your_pop_up,
    duration_osw = how_long_did_you_work_out
  ) |>
  mutate(
    across(
      everything(),
      ~ if_else(
          .x == "",
          NA,
          .x
        )
    )
  ) |> 
  mutate(
    timestamp = lubridate::mdy_hms(timestamp) |>
      lubridate::as_date(),
    p_date = lubridate::mdy(p_date),
    p_type = tolower(p_type)
  ) |> 
  filter(
    p_date >= meta$start
  ) |>
  mutate(
    p_type2 = case_when(
      stringr::str_detect(p_type, "\\(bw\\)") ~ "bw",
      stringr::str_detect(p_type, "\\(di\\)") ~ "di",
      stringr::str_detect(p_type, "\\(fmc\\)") ~ "fmc",
      stringr::str_detect(p_type, "\\(lge\\)") ~ "lge",
      stringr::str_detect(p_type, "\\(lm\\)") ~ "lm",
      stringr::str_detect(p_type, "\\(osw\\)") ~ "osw",
      stringr::str_detect(p_type, "\\(po\\)") ~ "pop",
      stringr::str_detect(p_type, "\\(star\\)") ~ "star",
      .default = "Uncategorized"
    ),
    .after = p_type
  ) |> 
  mutate(
    error = if_else(
      lubridate::year(timestamp) != lubridate::year(p_date),
      TRUE,
      FALSE
    ),
    .before = 1
  )
```

::: {.callout-warning collapse=true}

## Errors that needs fix

```{r}
foo <- tdat[["practice"]] |> 
  filter(
    error
  ) |> 
  select(
    timestamp,
    practice_date = p_date
  ) |> 
  left_join(
    dat[["practice"]] |> 
      select(
        1:4, 6
      ) |> 
      mutate(
        row_number = 1:n(),
        row_number = row_number + 1
      ) |> 
      mutate(
        timestamp = lubridate::mdy_hms(timestamp) |>
          lubridate::as_date(),
        practice_date = lubridate::mdy(practice_date)
      ),
    join_by(
      timestamp,
      practice_date
    )
  ) |> 
  relocate(
    row_number,
    .before = 1
  )

if (nrow(foo) > 0) {
  foo |> 
    kableExtra::kable()
} else {
  cat("None found. Good job people!")
}
```

:::

> Removing the rows with error from the data, and only looking at data for the pre-defined eligibility period:


- Eligibiliy start date: `r meta$start`
- Eligibility end date: `r meta$end`

# Practice Credit

```{r}
dat_practice <- tdat[["practice"]] |>
  filter(
    p_date <= meta$end
  ) |> 
  filter(
    error == FALSE
  ) |> 
  select(
    - error
  ) |>
  tidyr::unite(
    "player",
    c(off_skates, in_attendance),
    sep = ", ",
    remove = FALSE
  ) |> 
  tidyr::separate_longer_delim(
    player,
    delim = ", "
  ) |>
  filter(
    player != "NA"
  ) |> 
  mutate(
    player = tolower(trimws(player)),
    player = case_when(
      stringr::str_detect(player, "mini") ~ "mini fridge",
      stringr::str_detect(player, "toxic") ~ "gin n. toxic",
      stringr::str_detect(player, "beaver") ~ "eager beaver",
      .default = player
    )
  ) |> 
  distinct()

# foo <- dat_practice |>
#   group_by(
#     p_date,
#     p_type,
#     player
#   ) |>
#   mutate(
#     n = n()
#   ) |>
#   ungroup() |>
#   arrange(desc(n), player) |>
#   # filter(n > 1) |> View()
#   rowwise() |>
#   mutate(
#     off_skates = if_else(
#       tolower(off_skates) == "na",
#       NA,
#       off_skates
#     ),
#     duplicate = if_else(
#       stringr::str_detect(
#         tolower(in_attendance),
#         tolower(player)
#       ) &
#         # !is.na(off_skates) &
#         n >= 2,
#       TRUE,
#       FALSE
#     )
#   ) |>
#   filter(
#     duplicate
#   )

foo <- dat_practice |> 
  select(
    - in_attendance,
    - off_skates
  ) |> 
  rowwise() |> 
  mutate(
    across(
      matches("^duration"),
      ~ case_when(
        is.na(.) ~ 0,
        .default = readr::parse_number(.)
      ),
      .names = "new_{.col}"
    ),
    new_duration_osw = if_else(
      is.na(new_duration_osw) &
        stringr::str_detect(
            duration_osw, 
            "hr|hour"
          ),
      1,
      new_duration_osw
    ),
    new_duration_pop = if_else(
      is.na(new_duration_pop) &
        stringr::str_detect(
            duration_pop, 
            "hr|hour"
          ),
      1,
      new_duration_pop
    ),
  ) |> 
  select(
    player,
    timestamp,
    p_type2,
    p_type,
    dur_pop = new_duration_pop,
    dur_osw = new_duration_osw
  ) |> 
  mutate(
    credit_pop = 1*dur_pop,
    credit_osw = 0.5*dur_osw,
    credit_bw  = if_else(
      p_type2 == "bw",
      1,
      0
    ),
    credit_other = case_when(
      p_type2 == "lge" ~ 1,
      p_type2 == "star" ~ 1,
      p_type2 == "lm" ~ 1,
      p_type2 == "di" ~ 1,
      p_type2 == "fmc" ~ 1,
      .default = 0
    )
  )


bar <- foo |> 
  group_by(
    player
  ) |> 
  reframe(
    credit_pop = sum(credit_pop, na.rm = TRUE),
    credit_osw = sum(credit_osw, na.rm = TRUE),
    credit_bw = sum(credit_bw, na.rm = TRUE),
    credit_other = sum(credit_other, na.rm = TRUE)
  ) |> 
  # set limits on `bw` and `osw`
  mutate(
    credit_osw = if_else(credit_osw > 2, 2, credit_osw),
    credit_bw = if_else(credit_bw > 1, 1, credit_bw)
  ) |> 
  mutate(
    credit_current = rowSums(
      across(
        matches("credit")
      )
    )
  ) |> 
  arrange(
    desc(credit_current)
  )

bar |> 
  mutate(
    credit_reqd = meta$practice_credit_req,
    status = if_else(
      credit_current >= credit_reqd,
      "Complete",
      paste(
        round(abs(credit_current - credit_reqd), 1),
        " reqd"
      )
    )
  ) |> 
  select(
    player,
    status,
    `Credit Total` = credit_current,
    `Bout Watch` = credit_bw,
    `Off Skates` = credit_osw
  ) |> 
  DT::datatable()
```

## Plot

```{r fig.width=5, fig.height=7}
o_players = bar |> arrange(credit_current) |> pull(player)

bar |> 
  mutate(
    player = factor(
      player,
      levels = o_players
    ),
    credit_current = if_else(
      credit_current > meta$practice_credit_req,
      meta$practice_credit_req,
      credit_current
    ),
    colors = case_when(
      credit_current == meta$practice_credit_req ~
        "green",
      # credit_current > meta$practice_credit_req/2 ~
      #   "orange",
      .default = "yellow"
    ) |> 
      factor(
        levels = c(
          "green",
          # "orange",
          "yellow"
        )
      )
  ) |> 
  ggplot(
    aes(x = player, y = credit_current)
  ) +
  geom_histogram(
    stat = "identity",
    aes(fill = colors),
    col = "black"
  ) +
  geom_hline(
    yintercept = 5.5,
    col = "grey30",
    alpha = .8,
    lty = 2
  ) +
  scale_y_continuous(
    limits = c(0, meta$practice_credit_req)
  ) +
  labs(
    title = "Practice credits",
    x = "",
    y = paste0("Credits since ", meta[4,2])
  ) +
  scale_fill_manual(
    values = c(
      "green3", 
      # "orange", 
      "yellow"
    )
  ) +
  coord_flip() +
  theme_minimal(16) +
  theme(
    legend.position = "none"
  )
```

# Volunteer Hours

> Required hours: `r meta$volunteer_hr_req` hrs

```{r}
volunteer <- dat[[2]] |> 
  as_tibble() |> 
  select(
    timestamp,
    player = derby_name,
    player2 = who_are_you_though,
    month = month_of_volunteer_hours,
    volunteer_hrs = amount_of_volunteer_hours,
    purchased_hrs = how_many_hours_are_you_purchasing_10_hr_will_need_to_confirm_payment_before_credit_is_given,
    rollover_hrs = how_many_hours_will_you_be_rolling_over_this_month_from_last_month_keep_in_mind_that_you_cannot_roll_over_hours_if_you_have_already_completed_the_minimum_number_of_required_hours_for_the_current_month_you_can_roll_over_up_to_4_hours_from_the_previous_month_and_are_responsible_for_keeping_track_of_your_own_surplus_hours
  ) |> 
  mutate(
    across(
      everything(),
      ~ if_else(
          .x == "",
          NA,
          .x
        )
    )
  ) |> 
  mutate(
    timestamp = lubridate::mdy_hms(timestamp) |> lubridate::date(),
    year = lubridate::year(timestamp),
    month2 = lubridate::mdy(month) |> lubridate::month(label = TRUE),
    .before = timestamp
  ) |> 
  mutate(
    month3 = if_else(
      is.na(month2),
      month,
      month2
    ) |> 
      as.character() |> 
      tolower()
  ) |> 
  # count(month3) |> print(n = 24)
  mutate(
    month = case_when(
      stringr::str_detect(month3, "jan") ~ "jan",
      stringr::str_detect(month3, "feb") ~ "feb",
      stringr::str_detect(month3, "mar") ~ "mar",
      stringr::str_detect(month3, "apr") ~ "apr",
      stringr::str_detect(month3, "may") ~ "may",
      stringr::str_detect(month3, "jun") ~ "jun",
      stringr::str_detect(month3, "jul") ~ "jul",
      stringr::str_detect(month3, "aug") ~ "aug",
      stringr::str_detect(month3, "sep") ~ "sep",
      stringr::str_detect(month3, "oct") ~ "oct",
      stringr::str_detect(month3, "nov") ~ "nov",
      stringr::str_detect(month3, "dec") ~ "dec",
      .default = NA
    ),
    month_year = lubridate::my(
      paste(month, year, sep = "-")
    ),
    player = if_else(
      is.na(player),
      player2,
      player
    )
  ) |> 
  # count(as.character(month)) |> print(n = 24)
  select(
    month_year,
    year,
    month,
    player,
    matches("hrs$")
  ) |> 
  mutate(
    across(
      matches("hrs$"),
      ~ readr::parse_number(.x)
    ),
    total_hrs = rowSums(
      across(
        matches("hrs$")
      ),
      na.rm = TRUE
    ),
    .before = volunteer_hrs
  ) |> 
  group_by(
    month_year,
    year,
    month,
    player
  ) |> 
  reframe(
    across(
      matches("hrs$"),
      ~ sum(.x, na.rm = TRUE)
    )
  )

volunteer |> 
  filter(
    year == "2025" &
      stringr::str_detect(
        tolower(meta$volunteer_month),
        month
      )
  ) |> 
  arrange(
    desc(month_year)
  ) |> 
  select(
    - month,
    - month_year,
    - year
  ) |> 
  mutate(
    hrs_reqd = meta$volunteer_hr_req,
    status = if_else(
      total_hrs >= hrs_reqd,
      "Complete",
      paste(
        round(abs(total_hrs - hrs_reqd), 1),
        "h reqd"
      )
    ),
    .before = volunteer_hrs
  ) |> 
  select(
    player,
    status,
    volunteer_hrs,
    purchased_hrs,
    rollover_hrs
  ) |> 
  DT::datatable(
    caption = glue::glue(
      "Number of total volunteer hours for {meta$volunteer_month}."
    )
  )
  
```

