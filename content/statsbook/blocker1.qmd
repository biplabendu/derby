---
title: "Blocker Statistics"
reference-location: margin
citation-location: margin
editor_options: 
  chunk_output_type: console
---

# Blocker statistics over the course of the game

<!-- ## Individual Stats -->

::: {.callout-note}

## Definitions

- `n_jams`: number of jams in which a blocker/pivot was involved in, either on track or in the box. 

- `n_points_against_per_jam`: number of points scored against a player per jam. *Smaller numbers are better.*

  > n_points_against_per_jam = number of points scored in all jams that a blocker/pivot is involved in (either on track or in the box) divided by `n_jams`

- `prop_box_per_jam`: proportion of jams in which a blocker/pivot sat in the box. *Smaller numbers are better.*

- `prop_jams_smallwall`: proportion of jams in which a blocker/pivot was part of a smaller wall (less than 4). *Smaller numbers are better.*
:::

```{r}
library(dplyr)
library(ggplot2)
library(patchwork)
source(here::here("./functions/utils.R"))

# Load stats workbook ----------------------------------------------------------
files <- list.files(
  here::here("./data/"),
  pattern = "^STATS(.*?).xlsx$",
  full.names = TRUE
)

# writeLines("Let's peek inside one of the files")

teams <- purrr::map(
  files,
  function(x) {
    c(
      strsplit(x, "_|.xlsx")[[1]][2],
      strsplit(x, "_|.xlsx")[[1]][4]
    )
  }
)

```

<!-- # Read scores data -->

```{r}
scores_firsthalf <- purrr::map(
  files,
  function(x) {
    readxl::read_excel(
      x,
      sheet = 3,
      range = "A3:AK41",
      col_types = "text",
      # skip = 2,
      .name_repair = "minimal"
    ) |> 
      janitor::clean_names()
  }
)


scores_secondhalf <- purrr::map(
  files,
  function(x) {
    readxl::read_excel(
      x,
      sheet = 3,
      range = "A45:AK83",
      col_types = "text",
      # skip = 2,
      .name_repair = "minimal"
    ) |> 
      janitor::clean_names() |> 
      rename_with(
        .cols = c(18,37),
        ~ c("game_total", "game_total_2")
      )
  }
)


# Tidy scores data ---------------------------------------------------------------

tidy_scores_firsthalf <- purrr::map2(
  scores_firsthalf,
  teams,
  function(x, y) {
    tidy_scores(
      data = x,
      teams = y
    ) |> 
      mutate(
        half = "first",
        last_jam = max(jam, na.rm = TRUE)
      )
  }
)

tidy_scores_secondhalf <- purrr::map2(
  scores_secondhalf,
  teams,
  function(x, y) {
    tidy_scores(
      data = x,
      teams = y
    ) |> 
      mutate(
        half = "second",
        last_jam = NA
      )
  }
)

scores <- purrr::map2(
  tidy_scores_firsthalf,
  tidy_scores_secondhalf,
  ~ combine_two_halves(.x, .y)
)

```

<!-- # Read lineup data -->

```{r}
lineups_firsthalf <- purrr::map(
  files,
  function(x) {
    readxl::read_excel(
      x,
      sheet = 5,
      range = "A3:AV41",
      col_types = "text",
      # skip = 2,
      .name_repair = "minimal"
    ) |> 
      janitor::clean_names()
  }
)


lineups_secondhalf <- purrr::map(
  files,
  function(x) {
    readxl::read_excel(
      x,
      sheet = 5,
      range = "A45:AV83",
      col_types = "text",
      # skip = 2,
      .name_repair = "minimal"
    ) |> 
      janitor::clean_names()
  }
)

## TIDY LINEUPS DATA ----
tidy_lineups_firsthalf <- purrr::map2(
  lineups_firsthalf,
  teams,
  function(x, y) {
    tidy_lineups(
      data = x,
      teams = y
    ) |> 
      mutate(
        half = "first",
        last_jam = max(jam, na.rm = TRUE)
      )
  }
)
tidy_lineups_secondhalf <- purrr::map2(
  lineups_secondhalf,
  teams,
  function(x, y) {
    tidy_lineups(
      data = x,
      teams = y
    ) |> 
      mutate(
        half = "second",
        last_jam = NA
      )
  }
)
```


```{r}

# Stats for each blocker ---------------------------------------------------

blocker_plots <- purrr::pmap(
  list(
    tidy_lineups_firsthalf,
    tidy_lineups_secondhalf,
    teams,
    scores
  ),
  function(x, y, z, s) {
    foo <- combine_two_halves(
      x, y
      # tidy_lineups_firsthalf[[1]],
      # tidy_lineups_secondhalf[[2]]
    ) |>
      filter(
        what %in% c(
          "pivot",
          "blocker1",
          "blocker2",
          "blocker3"
        )
      ) |> 
      group_by(jam, team) |> 
      mutate(
        n_ontrack = sum(is.na(box))
      ) |>
      left_join(
        ## TO DO: ----
        # add info
        # if lead was scored against a wall
        # scores[[1]] |> 
        s |>
          filter(
            what == "jamtotal"
          ) |> 
          select(
            jam,
            team,
            scored_against = value
          ) |> 
          mutate(
            team = if_else(
              team == teams[[1]][1],
              teams[[1]][2],
              teams[[1]][1]
            )
          )
      ) |> 
      mutate(
        scored_against_pp = round(
          as.integer(scored_against)/4,
          2
        )
      ) |> 
      select(
        half,
        jam,
        team,
        n_ontrack,
        blocker = value,
        box,
        scored_against_pp
      ) |> 
      mutate(
        across(
          c(box),
          ~ if_else(
            is.na(.),
            0,
            1
          )
        ),
        smallwall = if_else(
          n_ontrack < 4 & box == 0,
          1,
          0
        )
      ) |> 
      group_by(
        half,
        team,
        blocker
      ) |>
      reframe(
        n_jams = length(unique(jam)),
        n_jams_smallwall = sum(smallwall),
        prop_jams_smallwall = round(n_jams_smallwall/n_jams, 1),
        n_box = sum(box),
        prop_box_per_jam = round(n_box/n_jams, 1),
        n_points_against = sum(scored_against_pp),
        n_points_against_per_jam = round(n_points_against/n_jams, 1),
        # n_lead_against = sum(lead_scored)
      ) |> 
      tidyr::pivot_longer(
        cols = !c(half, team, blocker),
        names_to = "what",
        values_to = "value"
      ) |>
      arrange(
        team,
        blocker,
        half
      )
  
    p1 <- foo |>
      ## Filter measures and teams
      filter(
        what == "n_jams"
        # !stringr::str_detect(what, "^n_box|^n_points|^n_jams_small")
      ) |>
      # filter(
      #   team == "HighAltitudeRollerDerby"
      # ) |>
      mutate(
        half = factor(half, levels = c("second", "first")),
        team = if_else(
          team == "HighAltitudeRollerDerby",
          "HARD",
          "Opponent"
        )
      ) |>
      ggplot(
        aes(
          x = as.factor(blocker),
          y = value,
          col = half,
          fill = half
        )
      ) +
      geom_bar(
        stat = "identity",
        # position = "stacked",
        width = .7,
        size = 0.5,
        color = "black"
      ) +
      labs(
        x = "Jammer",
        y = "Value",
        # subtitle = glue::glue(
        #   "{z[1]} vs.\n{z[2]}"
        # )
      ) +
      facet_grid(
        team ~ what,
        scales = "free"
      ) +
      scale_y_continuous(n.breaks = 3) +
      theme_minimal(20) +
      theme(
        legend.position = "top",
        legend.justification = "right",
        # legend.spacing.y = unit(1.0, 'cm'),
        legend.text = element_text(margin = margin(t = 5)),
        legend.title = element_blank()
      ) +
      guides(
        color = guide_legend(nrow = 1),
        fill = guide_legend(nrow = 1)
      ) +
      scale_fill_manual(
        values = c("orange", "yellow")
      ) +
      coord_flip()
    
    p2 <- foo |>
      ## Filter measures and teams
      filter(
        what %in% c(
          "prop_jams_smallwall", 
          "prop_box_per_jam", 
          "n_points_against_per_jam"
        )
      ) |>
      # filter(
      #   team == "HighAltitudeRollerDerby"
      # ) |>
      mutate(
        half = factor(half, levels = c("second", "first")),
        team = if_else(
          team == "HighAltitudeRollerDerby",
          "HARD",
          "Opponent"
        )
      ) |>
      ggplot(
        aes(
          x = as.factor(blocker),
          y = value,
          col = half,
          fill = half
        )
      ) +
      geom_bar(
        stat = "identity",
        position = "dodge",
        width = .7,
        size = 0.5,
        color = "black"
      ) +
      labs(
        x = "Jammer",
        y = "Value",
        title = glue::glue(
          "{z[1]} vs.\n{z[2]}"
        )
      ) +
      facet_grid(
        team ~ what,
        scales = "free"
      ) +
      scale_y_continuous(n.breaks = 3) +
      theme_bw(16) +
      theme(
        legend.position = "top",
        legend.justification = "right",
        # legend.spacing.y = unit(1.0, 'cm'),
        legend.text = element_text(margin = margin(t = 5)),
        legend.title = element_blank()
      ) +
      guides(
        color = guide_legend(nrow = 1),
        fill = guide_legend(nrow = 1)
      ) +
      scale_fill_manual(
        values = c("orange", "yellow")
      ) +
      coord_flip()

    p1 + p2 + plot_layout(widths = c(1, 2))
  }
)

```

```{r, fig.width=14, fig.height=10}
for (i in 1:length(blocker_plots)) {
  cat("# Showing statists for Game",i,"#\n\n")
  cat("Team 1:", teams[[i]][1], "\n")
  cat("Team 2:", teams[[i]][2])
  blocker_plots[[i]] |> 
    print()
}
```

<!-- ## Team Stats -->

<!-- ```{r} -->

<!-- # Stats across all blockers --------------------------------------------------- -->
<!-- blocker_plots_team <- purrr::pmap( -->
<!--   list( -->
<!--     tidy_lineups_firsthalf, -->
<!--     tidy_lineups_secondhalf, -->
<!--     teams, -->
<!--     scores -->
<!--   ), -->
<!--   function(x, y, z, s) { -->
<!--     foo <- combine_two_halves( -->
<!--       x, y -->
<!--       # tidy_lineups_firsthalf[[1]], -->
<!--       # tidy_lineups_secondhalf[[2]] -->
<!--     ) |> -->
<!--       filter( -->
<!--         what %in% c( -->
<!--           "pivot", -->
<!--           "blocker1", -->
<!--           "blocker2", -->
<!--           "blocker3" -->
<!--         ) -->
<!--       ) |>  -->
<!--       group_by(jam, team) |>  -->
<!--       mutate( -->
<!--         n_ontrack = sum(is.na(box)) -->
<!--       ) |> -->
<!--       left_join( -->
<!--         ## TO DO: ---- -->
<!--         # add info -->
<!--         # if lead was scored against a wall -->
<!--         # scores[[1]] |>  -->
<!--         s |> -->
<!--           filter( -->
<!--             what == "jamtotal" -->
<!--           ) |>  -->
<!--           select( -->
<!--             jam, -->
<!--             team, -->
<!--             scored_against = value -->
<!--           ) |>  -->
<!--           mutate( -->
<!--             team = if_else( -->
<!--               team == teams[[1]][1], -->
<!--               teams[[1]][2], -->
<!--               teams[[1]][1] -->
<!--             ) -->
<!--           ) -->
<!--       ) |>  -->
<!--       mutate( -->
<!--         scored_against_pp = round( -->
<!--           as.integer(scored_against)/4, -->
<!--           2 -->
<!--         ) -->
<!--       ) |>  -->
<!--       select( -->
<!--         half, -->
<!--         jam, -->
<!--         team, -->
<!--         n_ontrack, -->
<!--         blocker = value, -->
<!--         box, -->
<!--         scored_against_pp -->
<!--       ) |>  -->
<!--       mutate( -->
<!--         across( -->
<!--           c(box), -->
<!--           ~ if_else( -->
<!--             is.na(.), -->
<!--             0, -->
<!--             1 -->
<!--           ) -->
<!--         ), -->
<!--         smallwall = if_else( -->
<!--           n_ontrack < 4 & box == 0, -->
<!--           1, -->
<!--           0 -->
<!--         ) -->
<!--       ) |>  -->
<!--       group_by( -->
<!--         half, -->
<!--         team, -->
<!--         blocker -->
<!--       ) |> -->
<!--       reframe( -->
<!--         n_jams = length(unique(jam)), -->
<!--         n_jams_smallwall = sum(smallwall), -->
<!--         prop_jams_smallwall = round(n_jams_smallwall/n_jams, 1), -->
<!--         n_box = sum(box), -->
<!--         prop_box_per_jam = round(n_box/n_jams, 1), -->
<!--         n_points_against = sum(scored_against_pp), -->
<!--         n_points_against_per_jam = round(n_points_against/n_jams, 1), -->
<!--         # n_lead_against = sum(lead_scored) -->
<!--       ) |>  -->
<!--       tidyr::pivot_longer( -->
<!--         cols = !c(half, team, blocker), -->
<!--         names_to = "what", -->
<!--         values_to = "value" -->
<!--       ) |> -->
<!--       arrange( -->
<!--         team, -->
<!--         blocker, -->
<!--         half -->
<!--       ) -->

<!--     p1 <- foo |> -->
<!--       ## Filter measures and teams -->
<!--       filter( -->
<!--         what == "n_jams" -->
<!--         # !stringr::str_detect(what, "^n_box|^n_points|^n_jams_small") -->
<!--       ) |> -->
<!--       # filter( -->
<!--       #   team == "HighAltitudeRollerDerby" -->
<!--       # ) |> -->
<!--       mutate( -->
<!--         half = factor(half, levels = c("second", "first")), -->
<!--         team = if_else( -->
<!--           team == "HighAltitudeRollerDerby", -->
<!--           "HARD", -->
<!--           "Opponent" -->
<!--         ) -->
<!--       ) |> -->
<!--       ggplot( -->
<!--         aes( -->
<!--           x = as.factor(team), -->
<!--           y = value, -->
<!--           col = half, -->
<!--           fill = half -->
<!--         ) -->
<!--       ) + -->
<!--       geom_boxplot( -->
<!--         col = "black" -->
<!--       ) + -->
<!--       labs( -->
<!--         x = "Blocker", -->
<!--         y = "Value", -->
<!--         # subtitle = glue::glue( -->
<!--         #   "{z[1]} vs.\n{z[2]}" -->
<!--         # ) -->
<!--       ) + -->
<!--       facet_grid( -->
<!--         half ~ what, -->
<!--         scales = "free" -->
<!--       ) + -->
<!--       scale_y_continuous(n.breaks = 3) + -->
<!--       theme_minimal(20) + -->
<!--       theme( -->
<!--         legend.position = "top", -->
<!--         legend.justification = "right", -->
<!--         # legend.spacing.y = unit(1.0, 'cm'), -->
<!--         legend.text = element_text(margin = margin(t = 5)), -->
<!--         legend.title = element_blank() -->
<!--       ) + -->
<!--       guides( -->
<!--         color = guide_legend(nrow = 1), -->
<!--         fill = guide_legend(nrow = 1) -->
<!--       ) + -->
<!--       scale_fill_manual( -->
<!--         values = c("orange", "yellow") -->
<!--       ) -->

<!--     p2 <- foo |> -->
<!--       ## Filter measures and teams -->
<!--       filter( -->
<!--         what %in% c( -->
<!--           # "prop_jams_smallwall",  -->
<!--           "prop_box_per_jam",  -->
<!--           "n_points_against_per_jam" -->
<!--         ) -->
<!--       ) |> -->
<!--       # filter( -->
<!--       #   team == "HighAltitudeRollerDerby" -->
<!--       # ) |> -->
<!--       mutate( -->
<!--         half = factor(half, levels = c("second", "first")), -->
<!--         team = if_else( -->
<!--           team == "HighAltitudeRollerDerby", -->
<!--           "HARD", -->
<!--           "Opponent" -->
<!--         ) -->
<!--       ) |> -->
<!--       ggplot( -->
<!--         aes( -->
<!--           x = as.factor(team), -->
<!--           y = value, -->
<!--           col = half, -->
<!--           fill = half -->
<!--         ) -->
<!--       ) + -->
<!--       geom_boxplot(col="black") + -->
<!--       labs( -->
<!--         x = "Blocker", -->
<!--         y = "Value", -->
<!--         title = glue::glue( -->
<!--           "{z[1]} vs.\n{z[2]}" -->
<!--         ) -->
<!--       ) + -->
<!--       facet_grid( -->
<!--         half ~ what, -->
<!--         scales = "free" -->
<!--       ) + -->
<!--       scale_y_continuous(n.breaks = 3) + -->
<!--       theme_bw(16) + -->
<!--       theme( -->
<!--         legend.position = "top", -->
<!--         legend.justification = "right", -->
<!--         # legend.spacing.y = unit(1.0, 'cm'), -->
<!--         legend.text = element_text(margin = margin(t = 5)), -->
<!--         legend.title = element_blank() -->
<!--       ) + -->
<!--       guides( -->
<!--         color = guide_legend(nrow = 1), -->
<!--         fill = guide_legend(nrow = 1) -->
<!--       ) + -->
<!--       scale_fill_manual( -->
<!--         values = c("orange", "yellow") -->
<!--       ) -->

<!--     p1 + p2 + plot_layout(widths = c(1, 2)) -->
<!--   } -->
<!-- ) -->

<!-- ``` -->


<!-- ```{r, fig.width=14, fig.height=10} -->
<!-- for (i in 1:length(blocker_plots_team)) { -->
<!--   cat("# Showing statists for Game",i,"#\n\n") -->
<!--   cat("Team 1:", teams[[i]][1], "\n") -->
<!--   cat("Team 2:", teams[[i]][2]) -->
<!--   blocker_plots_team[[i]] |>  -->
<!--     print() -->
<!-- } -->
<!-- ``` -->
